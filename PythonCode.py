# -*- coding: utf-8 -*-
"""Science Fair.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jlGiKcDlP-iUSKBqFOSPHb0S1wRvVTdO

#Main Code

###Import Python Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
'''
# Install & Import Basemap for Maps
!pip3 install basemap
from mpl_toolkits.basemap import Basemap
'''

# Import Matplotlib for Graphing
# %matplotlib inline
import matplotlib.pyplot as plt

# Import Numpy & Pandas for Data Analysis
import numpy as np
import pandas as pd

# Import Scikit-Learn for Linear Regression Models
from sklearn.linear_model import LinearRegression

"""###Population & Location Data"""

# Read CSV File
cities_1000 = pd.read_csv('/content/us-cities-top-1k.csv')

# Remove Unwanted Data
sorted_cities_1000 = cities_1000.sort_values(by='Population', ascending=False)
cities = sorted_cities_1000[sorted_cities_1000['Population'] >= 500000]

'''
# Extract the Data
lat = cities['lat'].values
lon = cities['lon'].values
population = cities['Population'].values
names = cities['City']

# Plot the Background Map
fig = plt.figure(figsize = (8, 8))
m = Basemap(projection = 'lcc', resolution = 'l',
            lat_0 = 40, lon_0 = -96,
            width = 6.25E6, height = 3.25E6)
m.shadedrelief()
m.drawcoastlines(color='black')
m.drawcountries(color='black')
m.drawstates(color='black')

# Scatter Cities on Map
m.scatter(lon, lat, latlon = True,
          c = np.log10(population),
          s = np.log10(population) * 3,
          cmap = 'Reds', alpha = 0.8)
'''

"""###Crime"""

# Create Lists of Crime Data
crime_2023 = [49.1, 52.2, 66.1, 63.8, 64.9, 53.6, 49.4, 40.4, 51.1, 47.7, 40.3, 58.9, 57.1, 61.1, 47.2, 46.7, 45.0,
              74.1, 32.0, 74.8, 52.8, 45.3, 60.1, 39.4, 47.8, 75.5, 52.5, 57.3, 54.6, 55.2, 67.1, 71.5, 51.5, 60.9]
crime_2021 = [47.0, 56.2, 64.8, 63.9, 61.5, 52.1, 48.7, 36.5, 49.7, 46.5, 35.8, 57.6, 58.0, 56.1, 43.4, 44.2, 45.0,
              73.5, 32.0, 74.8, 49.1, 43.2, 57.8, 35.5, 47.8, 74.6, 52.5, 52.8, 48.8, 56.2, 68.5, 70.0, 50.5, 60.0]
crime_2019 = [44.2, 47.1, 64.6, 60.9, 58.1, 53.5, 46.1, 36.2, 49.5, 42.0, 34.6, 55.2, 58.3, 49.0, 42.4, 45.2, 45.0,
              71.8, 32.0, 74.7, 44.7, 42.1, 57.3, 33.2, 47.8, 71.3, 52.5, 54.9, 45.2, 55.7, 65.3, 68.6, 51.5, 60.9]
crime_2017 = [47.6, 54.7, 65.4, 62.7, 59.1, 56.9, 51.3, 36.6, 43.5, 51.0, 34.7, 58.5, 60.0, 50.3, 44.5, 43.1, 45.0,
              72.1, 32.0, 74.6, 39.5, 36.4, 64.2, 35.8, 47.8, 69.2, 52.5, 57.0, 44.1, 55.8, 63.8, 67.0, 52.8, 60.9]
crime_2015 = [47.1, 53.6, 60.6, 59.2, 66.1, 55.3, 50.1, 43.3, 41.8, 60.6, 41.4, 52.3, 68.0, 43.5, 44.2, 43.1, 45.0,
              74.6, 32.0, 74.5, 46.0, 37.7, 58.9, 41.1, 47.8, 65.2, 52.5, 65.9, 50.4, 61.5, 62.4, 55.9, 49.6, 60.9]
crime_2013 = [47.3, 65.7, 54.5, 61.7, 68.6, 41.4, 51.4, 39.6, 59.9, 54.5, 42.5, 52.3, 68.0, 32.3, 42.2, 43.1, 45.0,
              76.7, 32.0, 74.5, 42.0, 42.6, 51.4, 40.7, 47.8, 58.9, 52.5, 65.9, 39.2, 70.6, 62.4, 42.8, 49.6, 60.9]

# Create a New Dataframe
crime = pd.DataFrame()

# Add Data to Dataframe
crime['City'] = cities['City']
crime['2023'] = crime_2023
crime['2021'] = crime_2021
crime['2019'] = crime_2019
crime['2017'] = crime_2017
crime['2015'] = crime_2015
crime['2013'] = crime_2013

"""###Taxes"""

# Create Lists of Tax Data
taxes = [15.9, 13.5, 12.9, 8.6, 10.6, 9.5, 8.6, 13.5, 8.6, 13.5, 8.6, 9.3, 9.1, 13.5, 10.0, 9.9, 8.6,
        8.6, 8.6, 7.6, 10.7, 9.7, 12.0, 11.5, 7.6, 11.3, 9.0, 9.6, 10.8, 9.6, 10.9, 10.2, 9.5, 13.5]

# Put Data between 0 & 1
largest = max(taxes)
tax_final = []
for i in taxes:
  tax_final.append(round(1 - (i / largest), 3))

"""###Housing Cost"""

# Create a List for Every City
housing_cost_data = [
    [469.1, 561.0, 607.6, 577.3], [673.1, 801.3, 849.4, 746.8], [287.6, 330.4, 345.6, 321.0], [263.8, 304.1, 345.0, 327.0],
    [272.9, 305.0, 333.1, 315.3], [333.0, 415.4, 477.9, 439.7], [254.3, 291.2, 337.7, 320.5], [710.0, 830.0, 911.0, 880.0],
    [287.2, 336.7, 385.5, 372.4], [1385.0, 1640.0, 1797.8, 1618.4], [367.1, 488.6, 555.4, 467.9], [227.6, 260.5, 294.6, 289.3],
    [279.0, 325.0, 386.5, 370.0], [1100.0, 1320.0, 1375.0, 1140.0], [240.8, 274.1, 301.1, 284.7], [296.2, 354.1, 397.7, 387.2],
    [287.2, 336.7, 385.5, 372.4], [221.3, 245.7, 250.9, 227.0], [177.8, 200.8, 237.1, 224.2], [221.2, 248.7, 271.6, 268.6],
    [596.9, 698.6, 756.2, 699.3], [492.7, 607.1, 670.1, 636.1], [475.4, 544.3, 585.0, 557.2], [563.7, 642.2, 685.6, 644.4],
    [298.9, 349.5, 403.7, 385.8], [328.5, 358.1, 378.2, 357.8], [174.9, 194.2, 223.4, 227.3], [212.1, 235.6, 254.2, 251.2],
    [451.0, 536.4, 591.0, 556.8], [331.0, 397.0, 466.4, 431.4], [291.3, 319.0, 345.3, 339.6], [248.1, 292.5, 336.6, 335.2],
    [265.1, 331.2, 371.9, 362.6], [314.0, 370.0, 410.0, 390.0]
]

# Organize Data into 4 Separate Lists
cost_2020 = []
cost_2021 = []
cost_2022 = []
cost_2023 = []
for i in housing_cost_data:
  cost_2020.append(i[0])
  cost_2021.append(i[1])
  cost_2022.append(i[2])
  cost_2023.append(i[3])

# Create a New Dataframe
housing_cost = pd.DataFrame()

# Add Data to the Dataframe
housing_cost['City'] = cities['City']
housing_cost['2020'] = cost_2020
housing_cost['2021'] = cost_2021
housing_cost['2022'] = cost_2022
housing_cost['2023'] = cost_2023

"""###Property Value Appreciation"""

# Retrieving Appreciation Percentage from Housing Cost Data
appreciation_20_21 = []
appreciation_21_22 = []
appreciation_22_23 = []
for i in range(34):
  first = cost_2021[i] / cost_2020[i]
  appreciation_20_21.append(round((first - 1) * 100, 2))
  second = cost_2022[i] / cost_2021[i]
  appreciation_21_22.append(round((second - 1) * 100, 2))
  third = cost_2023[i] / cost_2022[i]
  appreciation_22_23.append(round((third - 1) * 100, 2))

# Create a New Dataframe
appreciation = pd.DataFrame()

# Add Data to Dataframe
appreciation['City'] = cities['City']
appreciation['20_21'] = appreciation_20_21
appreciation['21_22'] = appreciation_21_22
appreciation['22_23'] = appreciation_22_23

# Take the Average of the Past Years
appreciation_average = []
for i in range(34):
  total = appreciation['20_21'].to_list()[i] + appreciation['21_22'].to_list()[i] + appreciation['22_23'].to_list()[i]
  appreciation_average.append(round(total / 3, 2))

# Put Averages between 0 & 1
largest = max(appreciation_average)
appreciation_final = []
for i in appreciation_average:
  appreciation_final.append(round(i / largest, 3))

appreciation_average = []
for i in range(34):
  total = appreciation['20_21'].to_list()[i] +
          appreciation['21_22'].to_list()[i] +
          appreciation['22_23'].to_list()[i]
  appreciation_average.append(round(total / 3, 2))
largest = max(appreciation_average)
appreciation_final = []
for i in appreciation_average:
  appreciation_final.append(round(i / largest, 3))

"""###Walkability Score"""

# Create List of Data
walkability_score = [88, 69, 77, 47, 75, 41, 37, 53, 46, 51, 42, 31, 26, 89, 41, 26, 35,
                    51, 35, 40, 74, 61, 77, 83, 29, 64, 34, 34, 67, 42, 62, 43, 43, 47]

# Put Data between 0 & 1
largest = max(walkability_score)
walkability_final = []
for i in walkability_score:
  walkability_final.append(round(i / largest, 3))

"""###Public Transportation Score"""

# Create List of Data
public_transportation_score = [89, 53, 65, 36, 67, 36, 31, 37, 39, 40, 35, 25, 21, 77, 30, 27, 22,
                              36, 22, 28, 60, 45, 69, 72, 22, 53, 17, 27, 49, 36, 49, 29, 35, 33]

# Put Data between 0 & 1
largest = max(public_transportation_score)
public_transportation_final = []
for i in public_transportation_score:
  public_transportation_final.append(round(i / largest, 3))

"""###Climate Change Index"""

#Create List of Data
climate_change = [54.6, 54.6, 63.8, 25.7, 68.5, 35.9, 25.7, 54.6, 25.7, 54.6, 25.7, 61.5, 21.8, 54.6, 58.1, 42.4, 25.7,
                  71.4, 25.7, 47.1, 66.9, 67.6, 53.0, 64.6, 47.1, 58.1, 34.6, 40.6, 54.6, 40.1, 66.1, 43.8, 35.9, 54.6]

# Put Data between 0 & 1
largest = max(climate_change)
climate_change_final = []
for i in climate_change:
  climate_change_final.append(round(i / largest, 3))

"""###Restaurants per Capita"""

# Create List of Total Restaurants per City
restaurants_total = [36919, 26079, 14928, 11352, 8900, 6294, 3816, 6006, 6750, 3496, 3221, 2858, 2626, 9610, 2821, 3505, 5399,
                    5998, 1233, 2044, 6383, 4602, 9151, 7690, 3175, 4170, 2110, 1871, 3894, 3806, 2202, 1294, 1283, 1460]

# Create List of Restaurants per Capita
restaurants_per_capita = []
for i in range(34):
  divided = restaurants_total[i] / cities['Population'].to_list()[i]
  restaurants_per_capita.append(round(divided * 100, 3))

# Put Data between 0 & 1
largest = max(restaurants_per_capita)
restaurants_final = []
for i in restaurants_per_capita:
  restaurants_final.append(round(i / largest, 3))

"""###Median Income"""

# Create Lists for Data
income_2019 = [69407, 67418, 61811, 52450, 47474, 60931, 53751, 85507, 55332, 115893, 75413, 49661, 56975, 123859, 57118,
              63483, 65356, 33965, 48542, 43794, 102486, 75646, 92266, 79018, 63462, 50177, 55492, 54853, 76321, 58713,
              44192, 55567, 44365, 53161]
income_2021 = [67997, 70372, 66576, 55499, 52899, 68435, 54923, 93042, 57995, 126377, 79542, 58479, 58621, 121826, 58202,
              70869, 68235, 36140, 51241, 44317, 110781, 81630, 90088, 79283, 64857, 54652, 59214, 57182, 79057, 59746,
              46637, 58512, 50306, 61250]

"""###School District"""

# Create List for Data
schools = [6, 40, 20, 38, 9, 50, 38, 40, 28, 40, 38, 23, 42, 40, 18, 43, 38,
          29, 38, 41, 13, 8, 25, 5, 41, 12, 44, 30, 24, 48, 19, 47, 50, 40]

# Put Data between 0 & 1
largest = max(schools)
schools_final = []
for i in schools:
  schools_final.append(round(1 - (i / largest), 3))

"""###Percentage of People with College Degrees"""

# Create List for Data
college = [44.8, 33.8, 43.4, 33.8, 40.7, 36.8, 35.7, 41.9, 36.7, 50.7, 52.2, 36.3, 46.0, 50.7, 36.1, 39.4, 36.7,
          39.3, 27.1, 35.7, 44.8, 49.7, 52.6, 47.0, 41.0, 34.9, 35.4, 31.8, 38.2, 26.8, 34.3, 33.7, 29.4, 24.4]

# Put Data between 0 & 1
largest = max(college)
college_final = []
for i in college:
  college_final.append(round(i / largest, 3))

"""###Linear Regression"""

def c(n):
  x = np.array([0, 2, 4, 6, 8, 10])

  model = LinearRegression(fit_intercept=True)

  crime_predictions = []
  for i in range(34):
    y = [crime['2013'].to_list()[i], crime['2015'].to_list()[i], crime['2017'].to_list()[i],
        crime['2019'].to_list()[i], crime['2021'].to_list()[i], crime['2023'].to_list()[i]]
    model.fit(x.reshape(-1, 1), y)
    crime_predictions.append((model.coef_[0] * (10 + n) + model.intercept_).round(1))

  largest = max(crime_predictions)
  crime_final = []
  for i in crime_predictions:
    crime_final.append((1 - (i / largest)).round(3))

  return crime_final

def h(n):
  x = np.array([0, 1, 2, 3])

  model = LinearRegression(fit_intercept=True)

  housing_cost_predictions = []
  for i in range(34):
    y = [housing_cost['2020'].to_list()[i], housing_cost['2021'].to_list()[i], housing_cost['2022'].to_list()[i],
        housing_cost['2023'].to_list()[i]]
    model.fit(x.reshape(-1, 1), y)
    housing_cost_predictions.append((model.coef_[0] * (3 + n) + model.intercept_).round(1))

  largest = max(housing_cost_predictions)
  housing_cost_final = []
  for i in housing_cost_predictions:
    housing_cost_final.append((1 - (i / largest)).round(3))

  return housing_cost_final

def inc(n):
  x = np.array([0, 2])

  model = LinearRegression(fit_intercept=True)

  income_predictions = []
  for i in range(34):
    y = [income_2019[i], income_2021[i]]
    model.fit(x.reshape(-1, 1), y)
    income_predictions.append((model.coef_[0] * (2 + n) + model.intercept_).round())

  largest = max(income_predictions)
  income_final = []
  for i in income_predictions:
    income_final.append((i / largest).round(3))
  return income_final

"""###Final"""

def presentation():
  print("Hello! I am Shiv, and I will be assisting you today!\n")
  print("You will need to input data, so I can make the right choices for you.\n")
  print("I will list out 11 criteria, and you will need to give each a score between 1 and 10 based on how important it is to you!\n")
  print("10 is extremely important, and 1 is not important.")

  messages = ["Low Crime:  ", "Low Taxes:  ", "Cheaper Houses:  ", "Higher Property Value Appreciation Rate:  ",
              "More Walkability:  ", "Better Public Transportation:  ", "Less Affects of Climate Change:  ",
              "More Restaurants per Capita:  ", "Higher Median Income:  ", "Better School Districts:  ",
              "Higher Percentage of People with Bachelor's Degrees:  "]
  weights = []

  for i in messages:
    try:
      weights.append(int(input("\n" + i)))
    except:
      print("That didn't go through:( Make sure you input a number between 1 and 10. Nothing else!")
      print("I will default that one to 5 for now.")
      weights.append(5)

  try:
    n = int(input("\nNow, tell me how many years in the future I should predict for. (Between 0 and 5)  :  "))
  except:
    print("That didn't go through:( Make sure you input a number between 1 and 10. Nothing else!")
    print("I will default that one to 0 for now.")
    n = 0

  c_final = c(n)
  h_final = h(n)
  inc_final = inc(n)

  aggregate = []
  for i in range(34):
    aggregate.append([cities['City'].to_list()[i], c_final[i] * weights[0] + tax_final[i] * weights[1] +
                      h_final[i] * weights[2] + appreciation_final[i] * weights[3] + walkability_final[i] * weights[4] +
                      public_transportation_final[i] * weights[5] + climate_change_final[i] * weights[6] +
                      restaurants_final[i] * weights[7] + inc_final[i] * weights[8] + schools_final[i] * weights[9] +
                      college_final[i] * weights[10]])

  answer = sorted(aggregate, key=lambda x: x[1])
  answer = answer[::-1]
  print("\n\nYour final recommendations are below:")
  for i in range(1, 11):
    print("\n" + str(i) + ". " + answer[i - 1][0])

"""#Presentation"""

presentation()

"""#Report

###Crime Index Line of Best Fit Graphs
"""

from scipy.stats import pearsonr
correlations = []
for i in [2, 11, 12, 13, 15, 19, 25, 27, 29, 30, 21, 3, 9, 20, 28, 1, 14]:
  x = np.array([2013, 2015, 2017, 2019, 2021, 2023])
  y = np.array([crime_2013[i], crime_2015[i], crime_2017[i], crime_2019[i], crime_2021[i], crime_2023[i]])
  coefficients = np.polyfit(x, y, 1)
  line_of_best_fit = np.poly1d(coefficients)
  line_y = line_of_best_fit(x)
  a, b = pearsonr(x, y)
  plt.figure()
  plt.scatter(x, y, label = "Correlation Coefficient: " + str(a.round(3)))
  plt.plot(x, line_y, color='red', label='Line of Best Fit')
  plt.xlabel('Year')
  plt.ylabel('Crime Index')
  plt.legend()
  plt.title("Crime: " + cities["City"].to_list()[i])
  plt.show()

"""###Housing Cost Line of Best Fit Graphs"""

from scipy.stats import pearsonr
correlations = []
for i in range(34):
  x = np.array([2020, 2021, 2022, 2023])
  y = np.array([cost_2020[i], cost_2021[i], cost_2022[i], cost_2023[i]])
  coefficients = np.polyfit(x, y, 1)
  line_of_best_fit = np.poly1d(coefficients)
  line_y = line_of_best_fit(x)
  a, b = pearsonr(x, y)
  plt.figure()
  plt.scatter(x, y, label = "Correlation Coefficient: " + str(a.round(3)))
  plt.plot(x, line_y, color='red', label='Line of Best Fit')
  plt.xlabel('Year')
  plt.ylabel('Housing Cost')
  plt.legend()
  plt.title("Housing Cost: " + cities["City"].to_list()[i])
  plt.show()

"""###Run Simulations"""

final = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
names = cities['City'].to_list()
for n in range(6):
  c_final = c(n)
  h_final = h(n)
  inc_final = inc(n)
  for one in range(1, 6):
    for two in range(1, 6):
      for three in range(1, 6):
        for four in range(1, 6):
          for five in range(1, 6):
            for six in range(1, 6):
              for seven in range(1, 6):
                for eight in range(1, 6):
                  for nine in range(1, 6):
                    for ten in range(1, 6):
                      for eleven in range(1, 6):
                        aggregate = []
                        for i in range(34):
                          aggregate.append([cities['City'].to_list()[i], c_final[i] * one + tax_final[i] * two +
                                            h_final[i] * three + appreciation_final[i] * four + walkability_final[i] * five +
                                            public_transportation_final[i] * six + climate_change_final[i] * seven +
                                            restaurants_final[i] * eight + inc_final[i] * nine + schools_final[i] * ten +
                                            college_final[i] * eleven])
                        answer = sorted(aggregate, key=lambda x: x[1])
                        for i in range(34):
                          x = names.index(answer[i][0])
                          final[x] = final[x] + i

"""###Simulation Results"""

final = [507363358, 239971564, 446172847, 167665826, 488003476, 206625663, 102746229, 290814061, 333640794, 191101931,
         365028777, 326040322, 85853001, 440704629, 332795101, 220087542, 247273875, 297444348, 31183037, 93118114,
         538665853, 529751281, 529365160, 567670131, 287937103, 377511534, 91214685, 105537216, 445926625, 189246008,
         364692126, 108461694, 107342656, 69200852]
names = cities['City'].to_list()
biggest = max(final) / 100
results = []
for i in range(34):
  results.append([names[i], round(final[i] / biggest, 2)])
results = sorted(results, key = lambda x: x[1])
for i in range(34):
  print(results[i])

"""###Base Results"""

initial = []
for i in range(34):
  initial.append(c(0)[i] + tax_final[i] + h(0)[i] + appreciation_final[i] + walkability_final[i] +
              public_transportation_final[i] + climate_change_final[i] + restaurants_final[i] + inc(0)[i] +
              schools_final[i] + college_final[i])
names = cities['City'].to_list()
biggest = max(initial) / 100
base = []
for i in range(34):
  base.append([names[i], round(initial[i] / biggest, 2)])
base = sorted(base, key = lambda x: x[1])
for i in range(34):
  print(base[i])

"""###Final Score Data Table"""

table = pd.DataFrame()
first = []
second = []
for i in results:
  first.append(i[0])
  second.append(i[1])
table["City Name"] = first
table["Final Scores"] = second
table.to_csv('final_table.csv', index=False)

"""###Base Data Table"""

table = pd.DataFrame()
first = []
second = []
for i in base:
  first.append(i[0])
  second.append(i[1])
table["City Name"] = first
table["Hypothesis"] = second
table.to_csv('base_table.csv', index=False)

"""###Final Score Bar Chart"""

x = []
y = []
for i in results:
  x.append(i[0])
  y.append(i[1])
max_value = max(y)
plt.figure(figsize=(10, 6))
colormap = plt.cm.viridis
norm = plt.Normalize(0, max_value)
sm = plt.cm.ScalarMappable(cmap=colormap, norm=norm)
sm.set_array([])
bars = plt.bar(x, y, color=colormap(norm(y)), width = 0.5)
plt.xticks(rotation=45, ha='right', fontsize = 12)
plt.tight_layout()
plt.xlabel('Cities', fontsize = 15)
plt.ylabel('Score', fontsize = 15)
plt.title('Final Scores for Each City', fontsize = 18)
plt.show()

"""###Base Score Bar Chart"""

x = []
y = []
for i in base:
  x.append(i[0])
  y.append(i[1])
max_value = max(y)
plt.figure(figsize=(10, 6))
colormap = plt.cm.viridis
norm = plt.Normalize(0, max_value)
sm = plt.cm.ScalarMappable(cmap=colormap, norm=norm)
sm.set_array([])
bars = plt.bar(x, y, color=colormap(norm(y)), width = 0.5)
plt.xticks(rotation=45, ha='right', fontsize = 12)
plt.tight_layout()
plt.xlabel('Cities', fontsize = 15)
plt.ylabel('Score', fontsize = 15)
plt.title('Hypothesis for Each City', fontsize = 18)
plt.show()

"""###Raw DataFrame & CSV"""

df = pd.DataFrame()
df["City Name"] = cities["City"]
df["Population"] = cities["Population"]
df["Crime 2013"] = crime_2013
d["Crime 2015"] = crime_2015;;
df["Crime 2017"] = crime_2017;;
df["Crime 2019"] = crime_219;
df["Crime 2021"] = crime_2021
df["Crime 2023"] = crime_2023
df["Taxes"] = taxes
df["Housing Cost 2020"] = cost_2020
df["Housing Cost 2021"] = cost_2021
df["Housing Cost 2022"] = cost_2022
df["Housing Cost 2023"] = cost_2023
df["Walkability Score"] = walkability_score
df["Public Transportation Score"] = public_transportation_score
df["Climate Change"] = climate_change
df["Restaurants"] = restaurants_total
df["Median Income 2019"] = income_2019
df["Median Income 2021"] = income_2021
df["School District"] = schools
df["College Degrees"] = college
df.to_csv('raw_data.csv', index=False)